---
title: "Distro Comparison"
author: "Presented by Trevor and Evan"
---

## Landscape at a Glance

```{mermaid}
graph TD
  subgraph Gentoo
    Gent([Gentoo])
    ChromeOS([ChromeOS])
    Gent --> ChromeOS
  end
  subgraph Fedora / RHEL
    Fedora([Fedora])
    RHEL([RHEL])
    Rocky([Rocky])
    SilverBlue([SilverBlue])
    CentOS([CentOS])
    RHEL --> CentOS
    Fedora --> SilverBlue
  end
  subgraph Arch
    Arc([Arch])
    Manjaro([Manjaro])
    EndeavorOS([EndeavorOS])
    Arc --> EndeavorOS
    Arc --> Manjaro
  end
```
```{mermaid}
graph TD
  subgraph Independent
    NixOS([NixOS])
    Alpine([Alpine])
    Qubes([Qubes])
    Tails([Tails])
  end
  subgraph Debian
    Deb([Debian])
    Ubuntu([Ubuntu])
    Mint([Mint])
    PopOS([PopOS])
    Deb --> Ubuntu
    Ubuntu --> PopOS
    Ubuntu --> Mint
  end
```

## What makes Distros Different?

:::: {.columns}
::: {.column}
- Package Management
- Stability and Release Model
- Sane Defaults / DIY
- Documentation Support
:::
::: {.column}
- Single / Multi User
- Reproducibility / Reliability
- Immutibility, A/B root
- Community vs. Corporate support
:::
::::

---

### Package Management


| Package Manager | Primary Format | Common Distros | Package Source | Dependency Resolution |
| --------------- | -------------- | -------------- | -------------- | --------------------- |
| APT             | .deb           | Debian+        | Binary         | Strong                |
| DNF             | .rpm           | RHEL, Fedora   | Binary         | Strong                |
| Pacman          | .pkg.tar.zst   | Arch           | Binary         | Manual sometimes      |
| Zypper          | .rpm           | openSUSE       | Binary         | Strong                |
| Portage         | Source         | Gentoo         | Source         | High                  |
| Nix             | .nix / .nar    | All            | Both           | Per package           |
| Flatpak         | .flatpak       | All            | Binary         | No traditional deps   |
| AppImage        | .AppImage      | All            | Binary         | All Bundled           |

---

#### Installing Packages

:::: {.columns}
::: {.column}
##### Debian/Ubuntu (APT)
```bash
sudo apt update
sudo apt upgrade
sudo apt install pkg
```
:::
::: {.column}
##### Fedora (DNF)
```bash
sudo dnf upgrade --refresh
sudo dnf install pkg
```
:::
::::
<br/>

:::: {.columns}
::: {.column}
##### Arch (Pacman)
```bash
sudo pacman -Syu
sudo pacman -S pkg
```
:::
::: {.column}
##### Nix (User env)
```bash
nix profile upgrade --all
nix profile install nixpkgs#pkg
```
:::
::::

---

### Release Models

:::: {.columns}
::: {.column}
Distros Compared:

- **Debian**: Stable, 2+ years
- **Ubuntu**: Stable desktop, 6 months
- **Fedora**: Fast enterprise, 6 months
- **Arch**: Rolling release.
- **NixOS**: rolling release + stable 6 months
:::
::: {.column}
Philosophy:

- Stability-focused distros freeze software to reduce bugs.
- Rolling distros favor cutting-edge features, expecting users to manage breakage.
:::
::::

---

### Setup Required

:::: {.columns}
::: {.column}
Distros Compared:

- **PopOS/Mint**: Everything preconfigured
- **Ubuntu/Fedora**: Mostly preconfigured
- **Arch/Gentoo**: Minimal base, DIY
- **NixOS**: Explicit config
- **LFS**: Build your own distro
:::
::: {.column}
Philosophy:

- Sane defaults = Easy to get into
- DIY = Minimal assumptions, Maximal customization
:::
::::

---

### Documentation Provided

- **Arch Wiki**: Highly detailed, community-driven
- **Gentoo Docs**: Technical and exhaustive
- **Ubuntu/Fedora**: Corporate-backed wikis and forums
- **NixOS Manual**: Accurate, but small

---

### Single vs. Multi User Systems

:::: {.columns}
::: {.column}
Distros Compared:

- SU Desktop-first: Ubuntu, Fedora Workstation
- MU Server: Debian, RHEL
- NixOS: Supports both with configuration, per-user package management.
:::
::: {.column}
Philosophy:

- Desktop distros assume one user per device and have less need to put boundaries between systems
- Server distros emphasize user permissions, security boundaries, protecting shared resources
:::
::::

---

### Reproducibility

:::: {.columns}
::: {.column}
Distros Compared:

- **NixOS/Guix**: Full reproducibility - builds are identical anywhere
- **Debian/Fedora**: Partial - depends on package versions and sources
- **Arch**: Less emphasis - user manages state manually
:::
::: {.column}
Philosophy:

- Reproducibility ensures consistency, especially in devops/cloud
- Traditional distros trade this for flexibility and ease of use
:::
::::

---

### Immutability

:::: {.columns}
::: {.column}
Distros Compared:

- **NixOS**: System is built from declarative config, rollback-able
- **Fedora Silverblue**: Immutable OS, uses rpm-ostree and overlays
- **SteamOS**: Immutable version of Arch
- **Vanilla distros**: Mutable root filesystems
:::
::: {.column}
Philosophy:

- Immutability: Stability, rollback safety, less drift
- Mutable: Familiarity, quick changes, manual fixes
:::
::::

---

### Community vs. Corporate Orientation

:::: {.columns}
::: {.column}
Distros Compared:

- **Debian, Arch, Gentoo, NixOS**: Community-led, volunteer-driven.
- **Ubuntu (Canonical), Fedora (Red Hat)**: Corporate-backed.
:::
::: {.column}
Philosophy:

- Community distros prioritize freedom and transparency.
- Corporate-backed distros focus on support, enterprise readiness.
:::
::::

## Why Choose One Over the Other?

| Axis              | Favors             | Examples              |
|-------------------|--------------------|-----------------------|
| Stability (LTS)   | Debian/Ubuntu LTS  | Servers, labs         |
| Bleeding edge and Documentation     | Arch/Fedora        | Kernel / Dev          |
| Reproducibility   | NixOS              | Dev envs, CI          |
| Desktop         | MintOS, Elementary      | Onboarding, classrooms|
| Lightweight       | Arch, NixOS      | Less powerful systems |

## Why Arenâ€™t You Already on Nix?

- Declarative configs & rollbacks
- Reproducible dev environments
- Works alongside any distro
- Learning curve & mindset shift *(call it out honestly)*

## Discussion / Wrap-up

- Try some different distros our in VMs or on a second partition
- What are you optimizing for in your use of Linux?
- Which distro fits your hardware and your workflows?
